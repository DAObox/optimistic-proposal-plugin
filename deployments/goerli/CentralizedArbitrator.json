{
  "address": "0x3699A8DD940DE8102629AEcF18B3b148fAeB39A6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_arbitrationPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IArbitrable",
          "name": "_arbitrable",
          "type": "address"
        }
      ],
      "name": "AppealDecision",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IArbitrable",
          "name": "_arbitrable",
          "type": "address"
        }
      ],
      "name": "AppealPossible",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IArbitrable",
          "name": "_arbitrable",
          "type": "address"
        }
      ],
      "name": "DisputeCreation",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "appeal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "appealCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "appealPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "arbitrationCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choices",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "currentRuling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disputeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "disputeStatus",
      "outputs": [
        {
          "internalType": "enum IArbitrator.DisputeStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "contract IArbitrable",
          "name": "arbitrated",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "choices",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        },
        {
          "internalType": "enum IArbitrator.DisputeStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "giveRuling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_arbitrationPrice",
          "type": "uint256"
        }
      ],
      "name": "setArbitrationPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f6e3cdc46fd236dd832c4930479b18094451864af39146d69b545d81b53c092",
  "receipt": {
    "to": null,
    "from": "0x47d80912400ef8f8224531EBEB1ce8f2ACf4b75a",
    "contractAddress": "0x3699A8DD940DE8102629AEcF18B3b148fAeB39A6",
    "transactionIndex": 42,
    "gasUsed": "622468",
    "logsBloom": "0x
    "blockHash": "0x2b81ff76697210935be1a1e2d14d123e0a8f4e6c899a64576c306c7b27c69a6b",
    "transactionHash": "0x4f6e3cdc46fd236dd832c4930479b18094451864af39146d69b545d81b53c092",
    "logs": [],
    "blockNumber": 8845505,
    "cumulativeGasUsed": "7601814",
    "status": 1,
    "byzantium": true
  },
  "args": [
    420
  ],
  "numDeployments": 1,
  "solcInputHash": "2a1650f7b49a7d2e48bbdb2c1b7a4d81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arbitrationPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IArbitrable\",\"name\":\"_arbitrable\",\"type\":\"address\"}],\"name\":\"AppealDecision\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IArbitrable\",\"name\":\"_arbitrable\",\"type\":\"address\"}],\"name\":\"AppealPossible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IArbitrable\",\"name\":\"_arbitrable\",\"type\":\"address\"}],\"name\":\"DisputeCreation\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"appeal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"appealCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"appealPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"arbitrationCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choices\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"createDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"currentRuling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"disputeStatus\",\"outputs\":[{\"internalType\":\"enum IArbitrator.DisputeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"contract IArbitrable\",\"name\":\"arbitrated\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"choices\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"internalType\":\"enum IArbitrator.DisputeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"giveRuling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arbitrationPrice\",\"type\":\"uint256\"}],\"name\":\"setArbitrationPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is a centralized arbitrator deciding alone on the result of disputes. No appeals are possible.\",\"kind\":\"dev\",\"methods\":{\"appeal(uint256,bytes)\":{\"details\":\"Appeal a ruling. Note that it has to be called before the arbitrator contract calls rule.\",\"params\":{\"_disputeID\":\"ID of the dispute to be appealed.\",\"_extraData\":\"Can be used to give extra info on the appeal.\"}},\"appealCost(uint256,bytes)\":{\"details\":\"Cost of appeal. Since it is not possible, it's a high value which can never be paid.\",\"params\":{\"_disputeID\":\"ID of the dispute to be appealed. Not used by this contract.\",\"_extraData\":\"Not used by this contract.\"},\"returns\":{\"fee\":\"Amount to be paid.\"}},\"appealPeriod(uint256)\":{\"details\":\"Compute the start and end of the dispute's current or next appeal period, if possible.      If not known or appeal is impossible: should return (0, 0).\",\"params\":{\"_disputeID\":\"ID of the dispute.\"},\"returns\":{\"end\":\"The end of the period.\",\"start\":\"The start of the period.\"}},\"arbitrationCost(bytes)\":{\"details\":\"Cost of arbitration. Accessor to arbitrationPrice.\",\"params\":{\"_extraData\":\"Not used by this contract.\"},\"returns\":{\"fee\":\"Amount to be paid.\"}},\"constructor\":{\"details\":\"Constructor. Set the initial arbitration price.\",\"params\":{\"_arbitrationPrice\":\"Amount to be paid for arbitration.\"}},\"createDispute(uint256,bytes)\":{\"details\":\"Create a dispute. Must be called by the arbitrable contract.  Must be paid at least arbitrationCost().\",\"params\":{\"_choices\":\"Amount of choices the arbitrator can make in this dispute. When ruling ruling<=choices.\",\"_extraData\":\"Can be used to give additional info on the dispute to be created.\"},\"returns\":{\"disputeID\":\"ID of the dispute created.\"}},\"currentRuling(uint256)\":{\"details\":\"Return the ruling of a dispute.\",\"params\":{\"_disputeID\":\"ID of the dispute to rule.\"},\"returns\":{\"ruling\":\"The ruling which would or has been given.\"}},\"disputeStatus(uint256)\":{\"details\":\"Return the status of a dispute.\",\"params\":{\"_disputeID\":\"ID of the dispute to rule.\"},\"returns\":{\"status\":\"The status of the dispute.\"}},\"giveRuling(uint256,uint256)\":{\"details\":\"Give a ruling. UNTRUSTED.\",\"params\":{\"_disputeID\":\"ID of the dispute to rule.\",\"_ruling\":\"Ruling given by the arbitrator. Note that 0 means \\\"Not able/wanting to make a decision\\\".\"}},\"setArbitrationPrice(uint256)\":{\"details\":\"Set the arbitration price. Only callable by the owner.\",\"params\":{\"_arbitrationPrice\":\"Amount to be paid for arbitration.\"}}},\"title\":\"Centralized Arbitrator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release1/build1/CentralizedArbitrator.sol\":\"CentralizedArbitrator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/release1/build1/CentralizedArbitrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IArbitrator} from \\\"./interfaces/IArbitrator.sol\\\";\\nimport {IArbitrable} from \\\"./interfaces/IArbitrable.sol\\\";\\n\\n/** @title Centralized Arbitrator\\n *  @dev This is a centralized arbitrator deciding alone on the result of disputes. No appeals are possible.\\n */\\ncontract CentralizedArbitrator is IArbitrator {\\n    address public owner = msg.sender;\\n    uint private arbitrationPrice;\\n    uint constant NOT_PAYABLE_VALUE = (2 ** 256 - 2) / 2; // High value to be sure that the appeal is too expensive.\\n    uint256 public disputeId;\\n\\n    mapping(uint256 => DisputeStruct) public disputes;\\n\\n    struct DisputeStruct {\\n        IArbitrable arbitrated;\\n        uint choices;\\n        uint fee;\\n        uint ruling;\\n        DisputeStatus status;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Can only be called by the owner.\\\");\\n        _;\\n    }\\n\\n    modifier requireArbitrationFee(bytes memory _extraData) {\\n        require(\\n            msg.value >= arbitrationCost(_extraData),\\n            \\\"Not enough ETH to cover arbitration costs.\\\"\\n        );\\n        _;\\n    }\\n    modifier requireAppealFee(uint _disputeID, bytes memory _extraData) {\\n        require(\\n            msg.value >= appealCost(_disputeID, _extraData),\\n            \\\"Not enough ETH to cover appeal costs.\\\"\\n        );\\n        _;\\n    }\\n\\n    /** @dev Constructor. Set the initial arbitration price.\\n     *  @param _arbitrationPrice Amount to be paid for arbitration.\\n     */\\n    constructor(uint _arbitrationPrice) {\\n        arbitrationPrice = _arbitrationPrice;\\n    }\\n\\n    /** @dev Set the arbitration price. Only callable by the owner.\\n     *  @param _arbitrationPrice Amount to be paid for arbitration.\\n     */\\n    function setArbitrationPrice(uint _arbitrationPrice) public onlyOwner {\\n        arbitrationPrice = _arbitrationPrice;\\n    }\\n\\n    /** @dev Cost of arbitration. Accessor to arbitrationPrice.\\n     *  @param _extraData Not used by this contract.\\n     *  @return fee Amount to be paid.\\n     */\\n    function arbitrationCost(bytes memory _extraData) public view returns (uint fee) {\\n        return arbitrationPrice;\\n    }\\n\\n    /** @dev Cost of appeal. Since it is not possible, it's a high value which can never be paid.\\n     *  @param _disputeID ID of the dispute to be appealed. Not used by this contract.\\n     *  @param _extraData Not used by this contract.\\n     *  @return fee Amount to be paid.\\n     */\\n    function appealCost(uint _disputeID, bytes memory _extraData) public view returns (uint fee) {\\n        return NOT_PAYABLE_VALUE;\\n    }\\n\\n    /** @dev Create a dispute. Must be called by the arbitrable contract.\\n     *  Must be paid at least arbitrationCost().\\n     *  @param _choices Amount of choices the arbitrator can make in this dispute. When ruling ruling<=choices.\\n     *  @param _extraData Can be used to give additional info on the dispute to be created.\\n     *  @return disputeID ID of the dispute created.\\n     */\\n    function createDispute(\\n        uint _choices,\\n        bytes memory _extraData\\n    ) public payable returns (uint disputeID) {\\n        disputeID = disputeId++;\\n        disputes[disputeID] = DisputeStruct({\\n            arbitrated: IArbitrable(msg.sender),\\n            choices: _choices,\\n            fee: msg.value,\\n            ruling: 0,\\n            status: DisputeStatus.Waiting\\n        });\\n\\n        emit DisputeCreation(disputeID, IArbitrable(msg.sender));\\n    }\\n\\n    /** @dev Give a ruling. UNTRUSTED.\\n     *  @param _disputeID ID of the dispute to rule.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 means \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function _giveRuling(uint _disputeID, uint _ruling) internal {\\n        DisputeStruct storage dispute = disputes[_disputeID];\\n        require(_ruling <= dispute.choices, \\\"Invalid ruling.\\\");\\n        require(dispute.status != DisputeStatus.Solved, \\\"The dispute must not be solved already.\\\");\\n\\n        dispute.ruling = _ruling;\\n        dispute.status = DisputeStatus.Solved;\\n\\n        payable(msg.sender).transfer(dispute.fee);\\n        dispute.arbitrated.rule(_disputeID, _ruling);\\n    }\\n\\n    /** @dev Give a ruling. UNTRUSTED.\\n     *  @param _disputeID ID of the dispute to rule.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 means \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function giveRuling(uint _disputeID, uint _ruling) public onlyOwner {\\n        return _giveRuling(_disputeID, _ruling);\\n    }\\n\\n    /** @dev Return the status of a dispute.\\n     *  @param _disputeID ID of the dispute to rule.\\n     *  @return status The status of the dispute.\\n     */\\n    function disputeStatus(uint _disputeID) public view returns (DisputeStatus status) {\\n        return disputes[_disputeID].status;\\n    }\\n\\n    /** @dev Return the ruling of a dispute.\\n     *  @param _disputeID ID of the dispute to rule.\\n     *  @return ruling The ruling which would or has been given.\\n     */\\n    function currentRuling(uint _disputeID) public view returns (uint ruling) {\\n        return disputes[_disputeID].ruling;\\n    }\\n\\n    function appeal(uint256 _disputeID, bytes calldata _extraData) external payable {\\n        revert(\\\"Not possible to appeal.\\\");\\n    }\\n\\n    /**\\n     * @dev Compute the start and end of the dispute's current or next appeal period, if possible.\\n     *      If not known or appeal is impossible: should return (0, 0).\\n     * @param _disputeID ID of the dispute.\\n     * @return start The start of the period.\\n     * @return end The end of the period.\\n     */\\n    function appealPeriod(uint256 _disputeID) external view returns (uint256 start, uint256 end) {\\n        return (0, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x10b9ddde7120e2047604960bac643c3f23d8637dddcfdc1a4b0b55c47ce3085d\",\"license\":\"MIT\"},\"contracts/release1/build1/interfaces/IArbitrable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n/**\\n/** @title IArbitrable\\n *  @author Enrique Piqueras - <enrique@kleros.io>\\n *  Arbitrable interface.\\n *  When developing arbitrable contracts, we need to:\\n *  -Define the action taken when a ruling is received by the contract. We should do so in executeRuling.\\n *  -Allow dispute creation. For this a function must:\\n *      -Call arbitrator.createDispute.value(_fee)(_choices,_extraData);\\n *      -Create the event Dispute(_arbitrator,_disputeID,_rulingOptions);\\n */\\ninterface IArbitrable {\\n    /** @dev To be emmited when meta-evidence is submitted.\\n     *  @param _metaEvidenceID Unique identifier of meta-evidence.\\n     *  @param _evidence A link to the meta-evidence JSON.\\n     */\\n    event MetaEvidence(uint indexed _metaEvidenceID, string _evidence);\\n\\n    /** @dev To be emmited when a dispute is created to link the correct meta-evidence to the disputeID\\n     *  @param _arbitrator The arbitrator of the contract.\\n     *  @param _disputeID ID of the dispute in the IArbitrator contract.\\n     *  @param _metaEvidenceID Unique identifier of meta-evidence.\\n     *  @param _evidenceGroupID Unique identifier of the evidence group that is linked to this dispute.\\n     */\\n    event Dispute(\\n        IArbitrator indexed _arbitrator,\\n        uint indexed _disputeID,\\n        uint _metaEvidenceID,\\n        uint _evidenceGroupID\\n    );\\n\\n    /** @dev To be raised when evidence are submitted. Should point to the ressource (evidences are not to\\n     *       be stored on chain due to gas considerations).\\n     *  @param _arbitrator The arbitrator of the contract.\\n     *  @param _evidenceGroupID Unique identifier of the evidence group the evidence belongs to.\\n     *  @param _party The address of the party submiting the evidence. Note that 0x0 refers to evidence\\n     *         not submitted by any party.\\n     *  @param _evidence A URI to the evidence JSON file whose name should be its keccak256 hash followed by .json.\\n     */\\n    event Evidence(\\n        IArbitrator indexed _arbitrator,\\n        uint indexed _evidenceGroupID,\\n        address indexed _party,\\n        string _evidence\\n    );\\n\\n    /** @dev To be raised when a ruling is given.\\n     *  @param _arbitrator The arbitrator giving the ruling.\\n     *  @param _disputeID ID of the dispute in the IArbitrator contract.\\n     *  @param _ruling The ruling which was given.\\n     */\\n    event Ruling(IArbitrator indexed _arbitrator, uint indexed _disputeID, uint _ruling);\\n\\n    /** @dev Give a ruling for a dispute. Must be called by the arbitrator.\\n     *  The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n     *  @param _disputeID ID of the dispute in the IArbitrator contract.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for\\n     *         \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function rule(uint _disputeID, uint _ruling) external;\\n}\\n\",\"keccak256\":\"0xf3bd5e6b75f1921da7e59b165cb1987d51bfeac3afd47138d6a7e68ffb40e7a4\",\"license\":\"MIT\"},\"contracts/release1/build1/interfaces/IArbitrator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\n/**\\n * @title Arbitrator\\n * Arbitrator abstract contract.\\n * When developing arbitrator contracts we need to:\\n * - Define the functions for dispute creation (createDispute) and appeal (appeal). Don't forget to\\n * - store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n * - Define the functions for cost display (arbitrationCost and appealCost).\\n * - Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\n */\\ninterface IArbitrator {\\n    enum DisputeStatus {\\n        Waiting,\\n        Appealable,\\n        Solved\\n    }\\n\\n    /**\\n     * @dev To be emitted when a dispute is created.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event DisputeCreation(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be emitted when a dispute can be appealed.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealPossible(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev To be emitted when the current ruling is appealed.\\n     * @param _disputeID ID of the dispute.\\n     * @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealDecision(uint256 indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /**\\n     * @dev Create a dispute. Must be called by the arbitrable contract.\\n     * Must be paid at least arbitrationCost(_extraData).\\n     * @param _choices Amount of choices the arbitrator can make in this dispute.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return disputeID ID of the dispute created.\\n     */\\n    function createDispute(\\n        uint256 _choices,\\n        bytes calldata _extraData\\n    ) external payable returns (uint256 disputeID);\\n\\n    /**\\n     * @dev Compute the cost of arbitration. It is recommended not to increase it often,\\n     *      as it can be highly time and gas consuming for the arbitrated contracts to\\n     *      cope with fee augmentation.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Amount to be paid.\\n     */\\n    function arbitrationCost(bytes calldata _extraData) external view returns (uint256 cost);\\n\\n    /**\\n     * @dev Appeal a ruling. Note that it has to be called before the arbitrator contract calls rule.\\n     * @param _disputeID ID of the dispute to be appealed.\\n     * @param _extraData Can be used to give extra info on the appeal.\\n     */\\n    function appeal(uint256 _disputeID, bytes calldata _extraData) external payable;\\n\\n    /**\\n     * @dev Compute the cost of appeal. It is recommended not to increase it often, as it can\\n     *      be higly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     * @param _disputeID ID of the dispute to be appealed.\\n     * @param _extraData Can be used to give additional info on the dispute to be created.\\n     * @return cost Amount to be paid.\\n     */\\n    function appealCost(\\n        uint256 _disputeID,\\n        bytes calldata _extraData\\n    ) external view returns (uint256 cost);\\n\\n    /**\\n     * @dev Compute the start and end of the dispute's current or next appeal period, if possible.\\n     *      If not known or appeal is impossible: should return (0, 0).\\n     * @param _disputeID ID of the dispute.\\n     * @return start The start of the period.\\n     * @return end The end of the period.\\n     */\\n    function appealPeriod(uint256 _disputeID) external view returns (uint256 start, uint256 end);\\n\\n    /**\\n     * @dev Return the status of a dispute.\\n     * @param _disputeID ID of the dispute to rule.\\n     * @return status The status of the dispute.\\n     */\\n    function disputeStatus(uint256 _disputeID) external view returns (DisputeStatus status);\\n\\n    /**\\n     * @dev Return the current ruling of a dispute. This is useful for parties to know if they should appeal.\\n     * @param _disputeID ID of the dispute.\\n     * @return ruling The ruling which has been given or the one which will be given if there is no appeal.\\n     */\\n    function currentRuling(uint256 _disputeID) external view returns (uint256 ruling);\\n}\\n\",\"keccak256\":\"0x48952d6a4b6b822f7b440d516a245771d785de71ff4d413bd7c6ad480561dd32\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160a01b0319163317905534801561002257600080fd5b506040516109ec3803806109ec83398101604081905261004191610049565b600155610062565b60006020828403121561005b57600080fd5b5051919050565b61097b806100716000396000f3fe6080604052600436106100c75760003560e01c8063afe15cfb11610074578063f23f16e61161004e578063f23f16e61461028b578063f7434ea9146102ab578063ffb43c48146102cd57600080fd5b8063afe15cfb14610220578063c13517e114610258578063c97c4d5c1461026b57600080fd5b806349912f88116100a557806349912f881461016a578063564a565d1461017f5780638da5cb5b146101e857600080fd5b806310f169e8146100cc5780631c3db16d146101155780632e77c8d214610154575b600080fd5b3480156100d857600080fd5b506100ff6100e73660046106e6565b60009081526003602052604090206004015460ff1690565b60405161010c9190610737565b60405180910390f35b34801561012157600080fd5b506101466101303660046106e6565b6000908152600360208190526040909120015490565b60405190815260200161010c565b34801561016057600080fd5b5061014660025481565b61017d610178366004610745565b6102ed565b005b34801561018b57600080fd5b506101d761019a3660046106e6565b6003602081905260009182526040909120805460018201546002830154938301546004909301546001600160a01b03909216939092909160ff1685565b60405161010c9594939291906107c1565b3480156101f457600080fd5b50600054610208906001600160a01b031681565b6040516001600160a01b03909116815260200161010c565b34801561022c57600080fd5b5061024361023b3660046106e6565b506000908190565b6040805192835260208301919091520161010c565b6101466102663660046108a1565b61033a565b34801561027757600080fd5b5061017d6102863660046108e8565b610456565b34801561029757600080fd5b506101466102a63660046108a1565b6104be565b3480156102b757600080fd5b506101466102c636600461090a565b5060015490565b3480156102d957600080fd5b5061017d6102e83660046106e6565b6104e6565b60405162461bcd60e51b815260206004820152601760248201527f4e6f7420706f737369626c6520746f2061707065616c2e00000000000000000060448201526064015b60405180910390fd5b600280546000918261034b83610947565b9190505590506040518060a00160405280336001600160a01b031681526020018481526020013481526020016000815260200160006002811115610391576103916106ff565b8152506003600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083600281111561041c5761041c6106ff565b02179055505060405133915082907f141dfc18aa6a56fc816f44f0e9e2f1ebc92b15ab167770e17db5b084c10ed99590600090a392915050565b6000546001600160a01b031633146104b05760405162461bcd60e51b815260206004820181905260248201527f43616e206f6e6c792062652063616c6c656420627920746865206f776e65722e6044820152606401610331565b6104ba8282610545565b5050565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b92915050565b6000546001600160a01b031633146105405760405162461bcd60e51b815260206004820181905260248201527f43616e206f6e6c792062652063616c6c656420627920746865206f776e65722e6044820152606401610331565b600155565b600082815260036020526040902060018101548211156105a75760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642072756c696e672e00000000000000000000000000000000006044820152606401610331565b6002600482015460ff1660028111156105c2576105c26106ff565b036106355760405162461bcd60e51b815260206004820152602760248201527f5468652064697370757465206d757374206e6f7420626520736f6c766564206160448201527f6c72656164792e000000000000000000000000000000000000000000000000006064820152608401610331565b6003810182905560048101805460ff1916600290811790915581015460405133916108fc811502916000818181858888f1935050505015801561067c573d6000803e3d6000fd5b50805460405163188d362b60e11b815260048101859052602481018490526001600160a01b039091169063311a6c5690604401600060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b50505050505050565b6000602082840312156106f857600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061073357634e487b7160e01b600052602160045260246000fd5b9052565b602081016104e08284610715565b60008060006040848603121561075a57600080fd5b83359250602084013567ffffffffffffffff8082111561077957600080fd5b818601915086601f83011261078d57600080fd5b81358181111561079c57600080fd5b8760208285010111156107ae57600080fd5b6020830194508093505050509250925092565b600060a0820190506001600160a01b03871682528560208301528460408301528360608301526107f46080830184610715565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261082557600080fd5b813567ffffffffffffffff80821115610840576108406107fe565b604051601f8301601f19908116603f01168101908282118183101715610868576108686107fe565b8160405283815286602085880101111561088157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156108b457600080fd5b82359150602083013567ffffffffffffffff8111156108d257600080fd5b6108de85828601610814565b9150509250929050565b600080604083850312156108fb57600080fd5b50508035926020909101359150565b60006020828403121561091c57600080fd5b813567ffffffffffffffff81111561093357600080fd5b61093f84828501610814565b949350505050565b60006001820161096757634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000811000a",
  "deployedBytecode": "0x6080604052600436106100c75760003560e01c8063afe15cfb11610074578063f23f16e61161004e578063f23f16e61461028b578063f7434ea9146102ab578063ffb43c48146102cd57600080fd5b8063afe15cfb14610220578063c13517e114610258578063c97c4d5c1461026b57600080fd5b806349912f88116100a557806349912f881461016a578063564a565d1461017f5780638da5cb5b146101e857600080fd5b806310f169e8146100cc5780631c3db16d146101155780632e77c8d214610154575b600080fd5b3480156100d857600080fd5b506100ff6100e73660046106e6565b60009081526003602052604090206004015460ff1690565b60405161010c9190610737565b60405180910390f35b34801561012157600080fd5b506101466101303660046106e6565b6000908152600360208190526040909120015490565b60405190815260200161010c565b34801561016057600080fd5b5061014660025481565b61017d610178366004610745565b6102ed565b005b34801561018b57600080fd5b506101d761019a3660046106e6565b6003602081905260009182526040909120805460018201546002830154938301546004909301546001600160a01b03909216939092909160ff1685565b60405161010c9594939291906107c1565b3480156101f457600080fd5b50600054610208906001600160a01b031681565b6040516001600160a01b03909116815260200161010c565b34801561022c57600080fd5b5061024361023b3660046106e6565b506000908190565b6040805192835260208301919091520161010c565b6101466102663660046108a1565b61033a565b34801561027757600080fd5b5061017d6102863660046108e8565b610456565b34801561029757600080fd5b506101466102a63660046108a1565b6104be565b3480156102b757600080fd5b506101466102c636600461090a565b5060015490565b3480156102d957600080fd5b5061017d6102e83660046106e6565b6104e6565b60405162461bcd60e51b815260206004820152601760248201527f4e6f7420706f737369626c6520746f2061707065616c2e00000000000000000060448201526064015b60405180910390fd5b600280546000918261034b83610947565b9190505590506040518060a00160405280336001600160a01b031681526020018481526020013481526020016000815260200160006002811115610391576103916106ff565b8152506003600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083600281111561041c5761041c6106ff565b02179055505060405133915082907f141dfc18aa6a56fc816f44f0e9e2f1ebc92b15ab167770e17db5b084c10ed99590600090a392915050565b6000546001600160a01b031633146104b05760405162461bcd60e51b815260206004820181905260248201527f43616e206f6e6c792062652063616c6c656420627920746865206f776e65722e6044820152606401610331565b6104ba8282610545565b5050565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b92915050565b6000546001600160a01b031633146105405760405162461bcd60e51b815260206004820181905260248201527f43616e206f6e6c792062652063616c6c656420627920746865206f776e65722e6044820152606401610331565b600155565b600082815260036020526040902060018101548211156105a75760405162461bcd60e51b815260206004820152600f60248201527f496e76616c69642072756c696e672e00000000000000000000000000000000006044820152606401610331565b6002600482015460ff1660028111156105c2576105c26106ff565b036106355760405162461bcd60e51b815260206004820152602760248201527f5468652064697370757465206d757374206e6f7420626520736f6c766564206160448201527f6c72656164792e000000000000000000000000000000000000000000000000006064820152608401610331565b6003810182905560048101805460ff1916600290811790915581015460405133916108fc811502916000818181858888f1935050505015801561067c573d6000803e3d6000fd5b50805460405163188d362b60e11b815260048101859052602481018490526001600160a01b039091169063311a6c5690604401600060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b50505050505050565b6000602082840312156106f857600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061073357634e487b7160e01b600052602160045260246000fd5b9052565b602081016104e08284610715565b60008060006040848603121561075a57600080fd5b83359250602084013567ffffffffffffffff8082111561077957600080fd5b818601915086601f83011261078d57600080fd5b81358181111561079c57600080fd5b8760208285010111156107ae57600080fd5b6020830194508093505050509250925092565b600060a0820190506001600160a01b03871682528560208301528460408301528360608301526107f46080830184610715565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261082557600080fd5b813567ffffffffffffffff80821115610840576108406107fe565b604051601f8301601f19908116603f01168101908282118183101715610868576108686107fe565b8160405283815286602085880101111561088157600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156108b457600080fd5b82359150602083013567ffffffffffffffff8111156108d257600080fd5b6108de85828601610814565b9150509250929050565b600080604083850312156108fb57600080fd5b50508035926020909101359150565b60006020828403121561091c57600080fd5b813567ffffffffffffffff81111561093357600080fd5b61093f84828501610814565b949350505050565b60006001820161096757634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000811000a",
  "devdoc": {
    "details": "This is a centralized arbitrator deciding alone on the result of disputes. No appeals are possible.",
    "kind": "dev",
    "methods": {
      "appeal(uint256,bytes)": {
        "details": "Appeal a ruling. Note that it has to be called before the arbitrator contract calls rule.",
        "params": {
          "_disputeID": "ID of the dispute to be appealed.",
          "_extraData": "Can be used to give extra info on the appeal."
        }
      },
      "appealCost(uint256,bytes)": {
        "details": "Cost of appeal. Since it is not possible, it's a high value which can never be paid.",
        "params": {
          "_disputeID": "ID of the dispute to be appealed. Not used by this contract.",
          "_extraData": "Not used by this contract."
        },
        "returns": {
          "fee": "Amount to be paid."
        }
      },
      "appealPeriod(uint256)": {
        "details": "Compute the start and end of the dispute's current or next appeal period, if possible.      If not known or appeal is impossible: should return (0, 0).",
        "params": {
          "_disputeID": "ID of the dispute."
        },
        "returns": {
          "end": "The end of the period.",
          "start": "The start of the period."
        }
      },
      "arbitrationCost(bytes)": {
        "details": "Cost of arbitration. Accessor to arbitrationPrice.",
        "params": {
          "_extraData": "Not used by this contract."
        },
        "returns": {
          "fee": "Amount to be paid."
        }
      },
      "constructor": {
        "details": "Constructor. Set the initial arbitration price.",
        "params": {
          "_arbitrationPrice": "Amount to be paid for arbitration."
        }
      },
      "createDispute(uint256,bytes)": {
        "details": "Create a dispute. Must be called by the arbitrable contract.  Must be paid at least arbitrationCost().",
        "params": {
          "_choices": "Amount of choices the arbitrator can make in this dispute. When ruling ruling<=choices.",
          "_extraData": "Can be used to give additional info on the dispute to be created."
        },
        "returns": {
          "disputeID": "ID of the dispute created."
        }
      },
      "currentRuling(uint256)": {
        "details": "Return the ruling of a dispute.",
        "params": {
          "_disputeID": "ID of the dispute to rule."
        },
        "returns": {
          "ruling": "The ruling which would or has been given."
        }
      },
      "disputeStatus(uint256)": {
        "details": "Return the status of a dispute.",
        "params": {
          "_disputeID": "ID of the dispute to rule."
        },
        "returns": {
          "status": "The status of the dispute."
        }
      },
      "giveRuling(uint256,uint256)": {
        "details": "Give a ruling. UNTRUSTED.",
        "params": {
          "_disputeID": "ID of the dispute to rule.",
          "_ruling": "Ruling given by the arbitrator. Note that 0 means \"Not able/wanting to make a decision\"."
        }
      },
      "setArbitrationPrice(uint256)": {
        "details": "Set the arbitration price. Only callable by the owner.",
        "params": {
          "_arbitrationPrice": "Amount to be paid for arbitration."
        }
      }
    },
    "title": "Centralized Arbitrator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5282,
        "contract": "contracts/release1/build1/CentralizedArbitrator.sol:CentralizedArbitrator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5284,
        "contract": "contracts/release1/build1/CentralizedArbitrator.sol:CentralizedArbitrator",
        "label": "arbitrationPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5296,
        "contract": "contracts/release1/build1/CentralizedArbitrator.sol:CentralizedArbitrator",
        "label": "disputeId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5301,
        "contract": "contracts/release1/build1/CentralizedArbitrator.sol:CentralizedArbitrator",
        "label": "disputes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(DisputeStruct)5314_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IArbitrable)7370": {
        "encoding": "inplace",
        "label": "contract IArbitrable",
        "numberOfBytes": "20"
      },
      "t_enum(DisputeStatus)7436": {
        "encoding": "inplace",
        "label": "enum IArbitrator.DisputeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(DisputeStruct)5314_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CentralizedArbitrator.DisputeStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(DisputeStruct)5314_storage"
      },
      "t_struct(DisputeStruct)5314_storage": {
        "encoding": "inplace",
        "label": "struct CentralizedArbitrator.DisputeStruct",
        "members": [
          {
            "astId": 5304,
            "contract": "contracts/release1/build1/CentralizedArbitrator.sol:CentralizedArbitrator",
            "label": "arbitrated",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IArbitrable)7370"
          },
          {
            "astId": 5306,
            "contract": "contracts/release1/build1/CentralizedArbitrator.sol:CentralizedArbitrator",
            "label": "choices",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5308,
            "contract": "contracts/release1/build1/CentralizedArbitrator.sol:CentralizedArbitrator",
            "label": "fee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5310,
            "contract": "contracts/release1/build1/CentralizedArbitrator.sol:CentralizedArbitrator",
            "label": "ruling",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5313,
            "contract": "contracts/release1/build1/CentralizedArbitrator.sol:CentralizedArbitrator",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(DisputeStatus)7436"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}